#====================================================================
# NOTE: This dockerfile is used as the base image for the
#       app runtime env, build on ubuntu 22.04
# Version: 0.9
# Release Notes:
#   (1) Update to use Ubuntu22.04 as the base image
#   (2) no longer contains dependencies for building sdk
#   (3) Contains only the basic dependency environment for the run app.
#   (4) preinstall SOLA-3.4.0 stable verison.
#=====================================================================
# syntax=docker/dockerfile:1.2

FROM docker.m.daocloud.io/ubuntu:22.04
LABEL maintainer="Orion Zou"

ENV DEBIAN_FRONTEND noninteractive

#======================================================================
# Install dependencies：
# (1)conmmon & compile tools & python3.11 as default & pip
# (2)setup openssh-server,openssh-client
# (3)set user
# (4)clean
#======================================================================
USER root

RUN apt-get update --fix-missing \
    && apt-get install software-properties-common -y \
    && apt-get install -y --no-install-recommends --allow-unauthenticated \
                          vim wget sudo dialog apt-utils apt-transport-https dkms locales openssl openssh-client openssh-server sshpass \
                          expect kmod file git pciutils zip unzip bc curl iputils-ping net-tools iproute2 lsof tree rsync locate less \
                          gcc g++ gnupg gnupg2 libtinfo-dev zlib1g-dev build-essential cmake libedit-dev libxml2-dev yasm binutils binfmt-support readline-doc libelf-dev \
                          libssl-dev libffi-dev libbz2-dev libnss3-dev libncurses5-dev libgdbm-dev liblzma-dev libreadline-dev libgoogle-glog-dev libhwloc-dev \
                          sqlite3 libsqlite3-dev tcl8.6 tcl-dev tk-dev tk8.6 tk8.6-dev tix libreadline-dev nux-tools uuid-dev libgl1-mesa-glx \
                          python3-dev python3-venv python3-distutils python3-lib2to3 python3-gdbm python3-tk python3-tk-dbg python3-doc python3-examples python3-pip \
                          chrpath cpio diffstat gawk texinfo libeigen3-dev \
    && ln -sf /usr/bin/python3.11 /usr/bin/python \
    && apt-get clean autoclean -y \
    && apt-get autoremove -y \
    && rm -rf /var/lib/apt/lists/* ${SOLA_VERSION}_x86_64.run

#===============================================================
# set time zone & language
#===============================================================
ENV TZ Asia/Shanghai
ENV LANG en_US.UTF-8
RUN ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \
    && echo 'Asia/Shanghai' > /etc/timezone \
    && locale-gen en_US.UTF-8 \
    && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 \
    && export LANG=en_US.UTF-8

#===============================================================
# Build argument.
# add to user:moffett
# user authorization sudo, reserved change root
# set container start user and work directory
#===============================================================
ARG user=moffett
RUN echo ${user}" ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers \
    && useradd -ms /bin/bash ${user}  \
    && mkdir -p ${user}:${user} /home/${user}/workspace \
    && chown -R ${user}:${user} /home/${user}  \
    && chmod -R 755 /home/${user} 

USER ${user}

# 设置工作目录
ENV cur_work_dir=/home/${user}/repos
WORKDIR ${cur_work_dir}
# 拷贝当前目录下的所有文件到工作目录
COPY . ${cur_work_dir}

RUN cd ~/ && wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
RUN cd ~/ && bash Miniconda3-latest-Linux-x86_64.sh -b -p ~/miniconda3 && ~/miniconda3/bin/conda init bash && rm -r Miniconda3-latest-Linux-x86_64.sh

ARG CONDA_ENV_NAME=infra

ENV PATH=~/miniconda3/bin:$PATH
RUN ~/miniconda3/bin/conda create -n ${CONDA_ENV_NAME} python=3.10 --yes
ENV PATH=~/miniconda/envs/${CONDA_ENV_NAME}/bin:$PATH
ENV CONDA_DEFAULT_ENV=${CONDA_ENV_NAME}


# 安装依赖
# RUN poetry install
RUN bash -c "source ~/miniconda3/bin/activate ${CONDA_ENV_NAME} && pip install torch==2.2.1 --index-url https://download.pytorch.org/whl/cpu --no-cache-dir"
RUN bash -c "source ~/miniconda3/bin/activate ${CONDA_ENV_NAME} && pip install -r requirements.txt -i https://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com --no-cache-dir --timeout=7200"

# 启动服务
RUN echo "conda activate ${CONDA_ENV_NAME}" >> ~/.bashrc

# ENTRYPOINT [ "source /home/${user}/.bashrc" ] 
